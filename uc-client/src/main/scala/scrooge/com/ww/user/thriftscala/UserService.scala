/**
 * Generated by Scrooge
 *   version: 18.2.0
 *   rev: 13c26e196ec2a399833771a335ae98afcc4d6b57
 *   built at: 20180205-165339
 */
package com.ww.user.thriftscala

import com.twitter.scrooge.{
  LazyTProtocol,
  HasThriftStructCodec3,
  TFieldBlob,
  ThriftService,
  ThriftStruct,
  ThriftStructCodec,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftResponse,
  ThriftUtil,
  ToThriftService
}
import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.thrift.{
  Protocols,
  RichClientParam,
  RichServerParam,
  ThriftClientRequest,
  ThriftServiceIface
}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait UserService[+MM[_]] extends ThriftService {
  /**
     * Increment a number
     */
  def increment(a: Int): MM[Int]
  /**
     * Add two numbers
     */
  def addNumbers(a: Int, b: Int): MM[Int]
  /**
     * Add two strings
     */
  def addStrings(a: String, b: String): MM[String]
  
  def queryList(userQuery: com.ww.user.thriftscala.UserQuery): MM[Seq[com.ww.user.thriftscala.User]]
  
  def getById(uid: String): MM[com.ww.user.thriftscala.User]

  /**
   * Used to close the underlying `Service`.
   * Not a user-defined API.
   */
  def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
}


object UserService { self =>

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  trait ServicePerEndpoint
    extends ToThriftService
    with _root_.com.twitter.finagle.thrift.ThriftServiceIface.Filterable[ServicePerEndpoint] {
    def increment : _root_.com.twitter.finagle.Service[self.Increment.Args, self.Increment.SuccessType]
    def addNumbers : _root_.com.twitter.finagle.Service[self.AddNumbers.Args, self.AddNumbers.SuccessType]
    def addStrings : _root_.com.twitter.finagle.Service[self.AddStrings.Args, self.AddStrings.SuccessType]
    def queryList : _root_.com.twitter.finagle.Service[self.QueryList.Args, self.QueryList.SuccessType]
    def getById : _root_.com.twitter.finagle.Service[self.GetById.Args, self.GetById.SuccessType]

    def withIncrement(increment : _root_.com.twitter.finagle.Service[self.Increment.Args, self.Increment.SuccessType]): ServicePerEndpoint = this

    def withAddNumbers(addNumbers : _root_.com.twitter.finagle.Service[self.AddNumbers.Args, self.AddNumbers.SuccessType]): ServicePerEndpoint = this

    def withAddStrings(addStrings : _root_.com.twitter.finagle.Service[self.AddStrings.Args, self.AddStrings.SuccessType]): ServicePerEndpoint = this

    def withQueryList(queryList : _root_.com.twitter.finagle.Service[self.QueryList.Args, self.QueryList.SuccessType]): ServicePerEndpoint = this

    def withGetById(getById : _root_.com.twitter.finagle.Service[self.GetById.Args, self.GetById.SuccessType]): ServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint = this

    /**
     * Converts the `ServicePerEndpoint` to a `ThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    def toThriftService: ThriftService = MethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  trait ReqRepServicePerEndpoint
    extends ToThriftService
    with _root_.com.twitter.finagle.thrift.service.Filterable[ReqRepServicePerEndpoint] {
    def increment : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Increment.Args], _root_.com.twitter.scrooge.Response[self.Increment.SuccessType]]
    def addNumbers : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.AddNumbers.Args], _root_.com.twitter.scrooge.Response[self.AddNumbers.SuccessType]]
    def addStrings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.AddStrings.Args], _root_.com.twitter.scrooge.Response[self.AddStrings.SuccessType]]
    def queryList : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.QueryList.Args], _root_.com.twitter.scrooge.Response[self.QueryList.SuccessType]]
    def getById : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetById.Args], _root_.com.twitter.scrooge.Response[self.GetById.SuccessType]]

    def withIncrement(increment : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Increment.Args], _root_.com.twitter.scrooge.Response[self.Increment.SuccessType]]): ReqRepServicePerEndpoint = this

    def withAddNumbers(addNumbers : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.AddNumbers.Args], _root_.com.twitter.scrooge.Response[self.AddNumbers.SuccessType]]): ReqRepServicePerEndpoint = this

    def withAddStrings(addStrings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.AddStrings.Args], _root_.com.twitter.scrooge.Response[self.AddStrings.SuccessType]]): ReqRepServicePerEndpoint = this

    def withQueryList(queryList : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.QueryList.Args], _root_.com.twitter.scrooge.Response[self.QueryList.SuccessType]]): ReqRepServicePerEndpoint = this

    def withGetById(getById : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetById.Args], _root_.com.twitter.scrooge.Response[self.GetById.SuccessType]]): ReqRepServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint = this

    /**
     * Converts the `ServicePerEndpoint` to a `ThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    def toThriftService: ThriftService = ReqRepMethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  trait BaseServiceIface extends ToThriftService {
    def increment : com.twitter.finagle.Service[self.Increment.Args, self.Increment.SuccessType]
    def addNumbers : com.twitter.finagle.Service[self.AddNumbers.Args, self.AddNumbers.SuccessType]
    def addStrings : com.twitter.finagle.Service[self.AddStrings.Args, self.AddStrings.SuccessType]
    def queryList : com.twitter.finagle.Service[self.QueryList.Args, self.QueryList.SuccessType]
    def getById : com.twitter.finagle.Service[self.GetById.Args, self.GetById.SuccessType]

    def toThriftService: ThriftService = new MethodIface(this)
  }

  object ServicePerEndpoint {

    def apply(
      increment : _root_.com.twitter.finagle.Service[self.Increment.Args, self.Increment.SuccessType],
      addNumbers : _root_.com.twitter.finagle.Service[self.AddNumbers.Args, self.AddNumbers.SuccessType],
      addStrings : _root_.com.twitter.finagle.Service[self.AddStrings.Args, self.AddStrings.SuccessType],
      queryList : _root_.com.twitter.finagle.Service[self.QueryList.Args, self.QueryList.SuccessType],
      getById : _root_.com.twitter.finagle.Service[self.GetById.Args, self.GetById.SuccessType]
    ): ServicePerEndpoint = new ServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)

    private final class ServicePerEndpointImpl(
      override val increment : _root_.com.twitter.finagle.Service[self.Increment.Args, self.Increment.SuccessType],
      override val addNumbers : _root_.com.twitter.finagle.Service[self.AddNumbers.Args, self.AddNumbers.SuccessType],
      override val addStrings : _root_.com.twitter.finagle.Service[self.AddStrings.Args, self.AddStrings.SuccessType],
      override val queryList : _root_.com.twitter.finagle.Service[self.QueryList.Args, self.QueryList.SuccessType],
      override val getById : _root_.com.twitter.finagle.Service[self.GetById.Args, self.GetById.SuccessType]
    ) extends ServicePerEndpoint {

      override def withIncrement(
        increment : _root_.com.twitter.finagle.Service[self.Increment.Args, self.Increment.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)

      override def withAddNumbers(
        addNumbers : _root_.com.twitter.finagle.Service[self.AddNumbers.Args, self.AddNumbers.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)

      override def withAddStrings(
        addStrings : _root_.com.twitter.finagle.Service[self.AddStrings.Args, self.AddStrings.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)

      override def withQueryList(
        queryList : _root_.com.twitter.finagle.Service[self.QueryList.Args, self.QueryList.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)

      override def withGetById(
        getById : _root_.com.twitter.finagle.Service[self.GetById.Args, self.GetById.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)

      override def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
        new ServicePerEndpointImpl(
          increment = filter.toFilter.andThen(increment),
          addNumbers = filter.toFilter.andThen(addNumbers),
          addStrings = filter.toFilter.andThen(addStrings),
          queryList = filter.toFilter.andThen(queryList),
          getById = filter.toFilter.andThen(getById)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.increment,
          this.addNumbers,
          this.addStrings,
          this.queryList,
          this.getById
        )
    }
  }

  object ReqRepServicePerEndpoint {

    def apply(
      increment :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Increment.Args], _root_.com.twitter.scrooge.Response[self.Increment.SuccessType]],
      addNumbers :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.AddNumbers.Args], _root_.com.twitter.scrooge.Response[self.AddNumbers.SuccessType]],
      addStrings :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.AddStrings.Args], _root_.com.twitter.scrooge.Response[self.AddStrings.SuccessType]],
      queryList :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.QueryList.Args], _root_.com.twitter.scrooge.Response[self.QueryList.SuccessType]],
      getById :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.GetById.Args], _root_.com.twitter.scrooge.Response[self.GetById.SuccessType]]
    ): ReqRepServicePerEndpoint =
      new ReqRepServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)

    private final class ReqRepServicePerEndpointImpl(
      override val increment : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Increment.Args], _root_.com.twitter.scrooge.Response[self.Increment.SuccessType]],
      override val addNumbers : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.AddNumbers.Args], _root_.com.twitter.scrooge.Response[self.AddNumbers.SuccessType]],
      override val addStrings : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.AddStrings.Args], _root_.com.twitter.scrooge.Response[self.AddStrings.SuccessType]],
      override val queryList : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.QueryList.Args], _root_.com.twitter.scrooge.Response[self.QueryList.SuccessType]],
      override val getById : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.GetById.Args], _root_.com.twitter.scrooge.Response[self.GetById.SuccessType]]
    ) extends ReqRepServicePerEndpoint {

      override def withIncrement(
        increment : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Increment.Args], _root_.com.twitter.scrooge.Response[self.Increment.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)
      override def withAddNumbers(
        addNumbers : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.AddNumbers.Args], _root_.com.twitter.scrooge.Response[self.AddNumbers.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)
      override def withAddStrings(
        addStrings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.AddStrings.Args], _root_.com.twitter.scrooge.Response[self.AddStrings.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)
      override def withQueryList(
        queryList : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.QueryList.Args], _root_.com.twitter.scrooge.Response[self.QueryList.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)
      override def withGetById(
        getById : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetById.Args], _root_.com.twitter.scrooge.Response[self.GetById.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(increment, addNumbers, addStrings, queryList, getById)

      override def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(
          increment = filter.toFilter.andThen(increment),
          addNumbers = filter.toFilter.andThen(addNumbers),
          addStrings = filter.toFilter.andThen(addStrings),
          queryList = filter.toFilter.andThen(queryList),
          getById = filter.toFilter.andThen(getById)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.increment,
          this.addNumbers,
          this.addStrings,
          this.queryList,
          this.getById
        )
    }
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  case class ServiceIface(
    increment : com.twitter.finagle.Service[self.Increment.Args, self.Increment.SuccessType],
    addNumbers : com.twitter.finagle.Service[self.AddNumbers.Args, self.AddNumbers.SuccessType],
    addStrings : com.twitter.finagle.Service[self.AddStrings.Args, self.AddStrings.SuccessType],
    queryList : com.twitter.finagle.Service[self.QueryList.Args, self.QueryList.SuccessType],
    getById : com.twitter.finagle.Service[self.GetById.Args, self.GetById.SuccessType]
  ) extends BaseServiceIface
    with com.twitter.finagle.thrift.ThriftServiceIface.Filterable[ServiceIface] {

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServiceIface` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ServiceIface =
      copy(
        increment = filter.toFilter.andThen(increment),
        addNumbers = filter.toFilter.andThen(addNumbers),
        addStrings = filter.toFilter.andThen(addStrings),
        queryList = filter.toFilter.andThen(queryList),
        getById = filter.toFilter.andThen(getById)
      )
  }

  implicit object ServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ServicePerEndpointBuilder[ServicePerEndpoint] {
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServicePerEndpoint =
        ServicePerEndpoint(
          increment = ThriftServiceIface(self.Increment, thriftService, clientParam),
          addNumbers = ThriftServiceIface(self.AddNumbers, thriftService, clientParam),
          addStrings = ThriftServiceIface(self.AddStrings, thriftService, clientParam),
          queryList = ThriftServiceIface(self.QueryList, thriftService, clientParam),
          getById = ThriftServiceIface(self.GetById, thriftService, clientParam)
        )
  }

  implicit object ReqRepServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepServicePerEndpointBuilder[ReqRepServicePerEndpoint] {
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ReqRepServicePerEndpoint =
        ReqRepServicePerEndpoint(
          increment = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.Increment, thriftService, clientParam),
          addNumbers = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.AddNumbers, thriftService, clientParam),
          addStrings = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.AddStrings, thriftService, clientParam),
          queryList = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.QueryList, thriftService, clientParam),
          getById = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.GetById, thriftService, clientParam)
        )
  }

  @deprecated("Use ServicePerEndpointBuilder", "2017-11-07")
  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServiceIface =
        ServiceIface(
          increment = ThriftServiceIface(self.Increment, binaryService, clientParam),
          addNumbers = ThriftServiceIface(self.AddNumbers, binaryService, clientParam),
          addStrings = ThriftServiceIface(self.AddStrings, binaryService, clientParam),
          queryList = ThriftServiceIface(self.QueryList, binaryService, clientParam),
          getById = ThriftServiceIface(self.GetById, binaryService, clientParam)
        )
  }

  object Increment extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("increment_args")
      val AField = new TField("a", TType.I32, 1)
      val AFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          AField,
          false,
          false,
          AFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          a =
            {
              val field = original.a
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var a: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.I32 =>
                    a = readAValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'a' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          a,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        a: Int
      ): Args =
        new Args(
          a
        )
    
      def unapply(_item: Args): _root_.scala.Option[Int] = _root_.scala.Some(_item.a)
    
    
      @inline private[thriftscala] def readAValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeAField(a_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(AField)
        writeAValue(a_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeAValue(a_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(a_item)
      }
    
    
    }
    
    class Args(
        val a: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[Int]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        a: Int
      ) = this(
        a,
        Map.empty
      )
    
      def _1 = a
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        writeAField(a, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        a: Int = this.a,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          a,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.a
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Int
    
    object Result extends ThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("increment_result")
      val SuccessField = new TField("success", TType.I32, 0)
      val SuccessFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Int] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.I32 =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Int] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[Int]] = _root_.scala.Some(_item.success)
    
    
      @inline private[thriftscala] def readSuccessValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeSuccessField(success_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(success_item)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Int],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Int] with ThriftStruct
      with _root_.scala.Product1[Option[Int]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Int] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[Int] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Int] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[Int]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[Int]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    val name: String = "increment"
    val serviceName: String = "UserService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val increment$args = Increment.Args
  type increment$args = Increment.Args

  val increment$result = Increment.Result
  type increment$result = Increment.Result

  object AddNumbers extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("addNumbers_args")
      val AField = new TField("a", TType.I32, 1)
      val AFieldManifest = implicitly[Manifest[Int]]
      val BField = new TField("b", TType.I32, 2)
      val BFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          AField,
          false,
          false,
          AFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          BField,
          false,
          false,
          BFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          a =
            {
              val field = original.a
              field
            },
          b =
            {
              val field = original.b
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var a: Int = 0
        var b: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.I32 =>
                    a = readAValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'a' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I32 =>
                    b = readBValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'b' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          a,
          b,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        a: Int,
        b: Int
      ): Args =
        new Args(
          a,
          b
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple2[Int, Int]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private[thriftscala] def readAValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeAField(a_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(AField)
        writeAValue(a_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeAValue(a_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(a_item)
      }
    
      @inline private[thriftscala] def readBValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeBField(b_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(BField)
        writeBValue(b_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeBValue(b_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(b_item)
      }
    
    
    }
    
    class Args(
        val a: Int,
        val b: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product2[Int, Int]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        a: Int,
        b: Int
      ) = this(
        a,
        b,
        Map.empty
      )
    
      def _1 = a
      def _2 = b
    
      def toTuple: _root_.scala.Tuple2[Int, Int] = {
        (
          a,
          b
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        writeAField(a, _oprot)
        writeBField(b, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        a: Int = this.a,
        b: Int = this.b,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          a,
          b,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.a
        case 1 => this.b
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Int
    
    object Result extends ThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("addNumbers_result")
      val SuccessField = new TField("success", TType.I32, 0)
      val SuccessFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Int] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.I32 =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Int] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[Int]] = _root_.scala.Some(_item.success)
    
    
      @inline private[thriftscala] def readSuccessValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeSuccessField(success_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(success_item)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Int],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Int] with ThriftStruct
      with _root_.scala.Product1[Option[Int]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Int] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[Int] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Int] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[Int]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[Int]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    val name: String = "addNumbers"
    val serviceName: String = "UserService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val addNumbers$args = AddNumbers.Args
  type addNumbers$args = AddNumbers.Args

  val addNumbers$result = AddNumbers.Result
  type addNumbers$result = AddNumbers.Result

  object AddStrings extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("addStrings_args")
      val AField = new TField("a", TType.STRING, 1)
      val AFieldManifest = implicitly[Manifest[String]]
      val BField = new TField("b", TType.STRING, 2)
      val BFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          AField,
          false,
          false,
          AFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          BField,
          false,
          false,
          BFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          a =
            {
              val field = original.a
              field
            },
          b =
            {
              val field = original.b
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var a: String = null
        var b: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    a = readAValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'a' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    b = readBValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'b' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          a,
          b,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        a: String,
        b: String
      ): Args =
        new Args(
          a,
          b
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple2[String, String]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private[thriftscala] def readAValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeAField(a_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(AField)
        writeAValue(a_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeAValue(a_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(a_item)
      }
    
      @inline private[thriftscala] def readBValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeBField(b_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(BField)
        writeBValue(b_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeBValue(b_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(b_item)
      }
    
    
    }
    
    class Args(
        val a: String,
        val b: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product2[String, String]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        a: String,
        b: String
      ) = this(
        a,
        b,
        Map.empty
      )
    
      def _1 = a
      def _2 = b
    
      def toTuple: _root_.scala.Tuple2[String, String] = {
        (
          a,
          b
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (a ne null) writeAField(a, _oprot)
        if (b ne null) writeBField(b, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        a: String = this.a,
        b: String = this.b,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          a,
          b,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.a
        case 1 => this.b
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = String
    
    object Result extends ThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("addStrings_result")
      val SuccessField = new TField("success", TType.STRING, 0)
      val SuccessFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[String] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRING =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[String] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[String]] = _root_.scala.Some(_item.success)
    
    
      @inline private[thriftscala] def readSuccessValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeSuccessField(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(success_item)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[String],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[String] with ThriftStruct
      with _root_.scala.Product1[Option[String]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[String] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[String] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[String] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[String]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[String]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    val name: String = "addStrings"
    val serviceName: String = "UserService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val addStrings$args = AddStrings.Args
  type addStrings$args = AddStrings.Args

  val addStrings$result = AddStrings.Result
  type addStrings$result = AddStrings.Result

  object QueryList extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("queryList_args")
      val UserQueryField = new TField("userQuery", TType.STRUCT, 1)
      val UserQueryFieldManifest = implicitly[Manifest[com.ww.user.thriftscala.UserQuery]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          UserQueryField,
          false,
          false,
          UserQueryFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          userQuery =
            {
              val field = original.userQuery
              com.ww.user.thriftscala.UserQuery.withoutPassthroughFields(field)
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var userQuery: com.ww.user.thriftscala.UserQuery = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    userQuery = readUserQueryValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'userQuery' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          userQuery,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        userQuery: com.ww.user.thriftscala.UserQuery
      ): Args =
        new Args(
          userQuery
        )
    
      def unapply(_item: Args): _root_.scala.Option[com.ww.user.thriftscala.UserQuery] = _root_.scala.Some(_item.userQuery)
    
    
      @inline private[thriftscala] def readUserQueryValue(_iprot: TProtocol): com.ww.user.thriftscala.UserQuery = {
        com.ww.user.thriftscala.UserQuery.decode(_iprot)
      }
    
      @inline private def writeUserQueryField(userQuery_item: com.ww.user.thriftscala.UserQuery, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(UserQueryField)
        writeUserQueryValue(userQuery_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeUserQueryValue(userQuery_item: com.ww.user.thriftscala.UserQuery, _oprot: TProtocol): Unit = {
        userQuery_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val userQuery: com.ww.user.thriftscala.UserQuery,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[com.ww.user.thriftscala.UserQuery]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        userQuery: com.ww.user.thriftscala.UserQuery
      ) = this(
        userQuery,
        Map.empty
      )
    
      def _1 = userQuery
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (userQuery ne null) writeUserQueryField(userQuery, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        userQuery: com.ww.user.thriftscala.UserQuery = this.userQuery,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          userQuery,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.userQuery
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Seq[com.ww.user.thriftscala.User]
    
    object Result extends ThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("queryList_result")
      val SuccessField = new TField("success", TType.LIST, 0)
      val SuccessFieldManifest = implicitly[Manifest[Seq[com.ww.user.thriftscala.User]]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[com.ww.user.thriftscala.User]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field.map { field =>
                  com.ww.user.thriftscala.User.withoutPassthroughFields(field)
                }
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Seq[com.ww.user.thriftscala.User]] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.LIST =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Seq[com.ww.user.thriftscala.User]] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[Seq[com.ww.user.thriftscala.User]]] = _root_.scala.Some(_item.success)
    
    
      @inline private[thriftscala] def readSuccessValue(_iprot: TProtocol): Seq[com.ww.user.thriftscala.User] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[com.ww.user.thriftscala.User](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              com.ww.user.thriftscala.User.decode(_iprot)
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeSuccessField(success_item: Seq[com.ww.user.thriftscala.User], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Seq[com.ww.user.thriftscala.User], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRUCT, success_item.size))
        success_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = success_item.size
            while (_i < _size) {
              val success_item_element = success_item(_i)
              success_item_element.write(_oprot)
              _i += 1
            }
          case _ =>
            success_item.foreach { success_item_element =>
              success_item_element.write(_oprot)
            }
        }
        _oprot.writeListEnd()
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Seq[com.ww.user.thriftscala.User]],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Seq[com.ww.user.thriftscala.User]] with ThriftStruct
      with _root_.scala.Product1[Option[Seq[com.ww.user.thriftscala.User]]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Seq[com.ww.user.thriftscala.User]] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[Seq[com.ww.user.thriftscala.User]] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Seq[com.ww.user.thriftscala.User]] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[Seq[com.ww.user.thriftscala.User]]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[Seq[com.ww.user.thriftscala.User]]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    val name: String = "queryList"
    val serviceName: String = "UserService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val queryList$args = QueryList.Args
  type queryList$args = QueryList.Args

  val queryList$result = QueryList.Result
  type queryList$result = QueryList.Result

  object GetById extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getById_args")
      val UidField = new TField("uid", TType.STRING, 1)
      val UidFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          UidField,
          false,
          false,
          UidFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          uid =
            {
              val field = original.uid
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var uid: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    uid = readUidValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'uid' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          uid,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        uid: String
      ): Args =
        new Args(
          uid
        )
    
      def unapply(_item: Args): _root_.scala.Option[String] = _root_.scala.Some(_item.uid)
    
    
      @inline private[thriftscala] def readUidValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeUidField(uid_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(UidField)
        writeUidValue(uid_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeUidValue(uid_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(uid_item)
      }
    
    
    }
    
    class Args(
        val uid: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[String]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        uid: String
      ) = this(
        uid,
        Map.empty
      )
    
      def _1 = uid
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (uid ne null) writeUidField(uid, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        uid: String = this.uid,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          uid,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.uid
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = com.ww.user.thriftscala.User
    
    object Result extends ThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getById_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.ww.user.thriftscala.User]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.ww.user.thriftscala.User.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.ww.user.thriftscala.User] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.ww.user.thriftscala.User] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.ww.user.thriftscala.User]] = _root_.scala.Some(_item.success)
    
    
      @inline private[thriftscala] def readSuccessValue(_iprot: TProtocol): com.ww.user.thriftscala.User = {
        com.ww.user.thriftscala.User.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.ww.user.thriftscala.User, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.ww.user.thriftscala.User, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.ww.user.thriftscala.User],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.ww.user.thriftscala.User] with ThriftStruct
      with _root_.scala.Product1[Option[com.ww.user.thriftscala.User]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.ww.user.thriftscala.User] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.ww.user.thriftscala.User] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.ww.user.thriftscala.User] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[com.ww.user.thriftscala.User]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[com.ww.user.thriftscala.User]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    val name: String = "getById"
    val serviceName: String = "UserService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val getById$args = GetById.Args
  type getById$args = GetById.Args

  val getById$result = GetById.Result
  type getById$result = GetById.Result


  trait MethodPerEndpoint
    extends UserService[Future] {
    /**
       * Increment a number
       */
    def increment(a: Int): Future[Int]
    /**
       * Add two numbers
       */
    def addNumbers(a: Int, b: Int): Future[Int]
    /**
       * Add two strings
       */
    def addStrings(a: String, b: String): Future[String]
    
    def queryList(userQuery: com.ww.user.thriftscala.UserQuery): Future[Seq[com.ww.user.thriftscala.User]]
    
    def getById(uid: String): Future[com.ww.user.thriftscala.User]
  }

  object MethodPerEndpoint {

    def apply(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint = {
      new MethodPerEndpointImpl(servicePerEndpoint) {}
    }

    /**
     * Use `MethodPerEndpoint.apply()` instead of this constructor.
     */
    class MethodPerEndpointImpl protected (servicePerEndpoint: ServicePerEndpoint)
      extends MethodPerEndpoint {
        def increment(a: Int): Future[Int] =
          servicePerEndpoint.increment(self.Increment.Args(a))
        def addNumbers(a: Int, b: Int): Future[Int] =
          servicePerEndpoint.addNumbers(self.AddNumbers.Args(a, b))
        def addStrings(a: String, b: String): Future[String] =
          servicePerEndpoint.addStrings(self.AddStrings.Args(a, b))
        def queryList(userQuery: com.ww.user.thriftscala.UserQuery): Future[Seq[com.ww.user.thriftscala.User]] =
          servicePerEndpoint.queryList(self.QueryList.Args(userQuery))
        def getById(uid: String): Future[com.ww.user.thriftscala.User] =
          servicePerEndpoint.getById(self.GetById.Args(uid))

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  object ReqRepMethodPerEndpoint {

    def apply(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      new ReqRepMethodPerEndpointImpl(servicePerEndpoint) { }

    /**
     * Use `ReqRepMethodPerEndpoint.apply()` instead of this constructor.
     */
    class ReqRepMethodPerEndpointImpl protected (servicePerEndpoint: ReqRepServicePerEndpoint)
      extends MethodPerEndpoint {

        def increment(a: Int): Future[Int] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.Increment.Args(a))
          servicePerEndpoint.increment(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }
        def addNumbers(a: Int, b: Int): Future[Int] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.AddNumbers.Args(a, b))
          servicePerEndpoint.addNumbers(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }
        def addStrings(a: String, b: String): Future[String] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.AddStrings.Args(a, b))
          servicePerEndpoint.addStrings(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }
        def queryList(userQuery: com.ww.user.thriftscala.UserQuery): Future[Seq[com.ww.user.thriftscala.User]] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.QueryList.Args(userQuery))
          servicePerEndpoint.queryList(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }
        def getById(uid: String): Future[com.ww.user.thriftscala.User] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.GetById.Args(uid))
          servicePerEndpoint.getById(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  class MethodIface(serviceIface: BaseServiceIface)
    extends FutureIface {
    def increment(a: Int): Future[Int] =
      serviceIface.increment(self.Increment.Args(a))
    def addNumbers(a: Int, b: Int): Future[Int] =
      serviceIface.addNumbers(self.AddNumbers.Args(a, b))
    def addStrings(a: String, b: String): Future[String] =
      serviceIface.addStrings(self.AddStrings.Args(a, b))
    def queryList(userQuery: com.ww.user.thriftscala.UserQuery): Future[Seq[com.ww.user.thriftscala.User]] =
      serviceIface.queryList(self.QueryList.Args(userQuery))
    def getById(uid: String): Future[com.ww.user.thriftscala.User] =
      serviceIface.getById(self.GetById.Args(uid))
  }

  implicit object MethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.MethodPerEndpointBuilder[ServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2018-01-12")
  implicit object ThriftServiceBuilder
    extends _root_.com.twitter.finagle.thrift.service.ThriftServiceBuilder[ServicePerEndpoint, UserService[Future]] {
    def build(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  implicit object ReqRepMethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepMethodPerEndpointBuilder[ReqRepServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      ReqRepMethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use ReqRepMethodPerEndpointBuilder", "2018-01-12")
  implicit object ReqRepThriftServiceBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepThriftServiceBuilder[ReqRepServicePerEndpoint, UserService[Future]] {
    def build(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      ReqRepMethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2017-11-07")
  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, UserService[Future]] {
    def newMethodIface(serviceIface: ServiceIface): MethodIface =
      new MethodIface(serviceIface)
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  trait FutureIface
    extends UserService[Future] {
    /**
       * Increment a number
       */
    def increment(a: Int): Future[Int]
    /**
       * Add two numbers
       */
    def addNumbers(a: Int, b: Int): Future[Int]
    /**
       * Add two strings
       */
    def addStrings(a: String, b: String): Future[String]
    
    def queryList(userQuery: com.ww.user.thriftscala.UserQuery): Future[Seq[com.ww.user.thriftscala.User]]
    
    def getById(uid: String): Future[com.ww.user.thriftscala.User]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      clientParam: RichClientParam)
    extends UserService$FinagleClient(service, clientParam)
    with FutureIface
    with MethodPerEndpoint {

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "UserService",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats,
        responseClassifier = responseClassifier
      )
    )

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats
      )
    )
  }

  class FinagledService(
      iface: FutureIface,
      serverParam: RichServerParam)
    extends UserService$FinagleService(iface, serverParam) {

    @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
    def this(
      iface: FutureIface,
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String = "UserService"
    ) = this(iface, RichServerParam(protocolFactory, serviceName))
  }
}
